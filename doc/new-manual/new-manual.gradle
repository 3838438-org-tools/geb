buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
    }
}

apply plugin: 'org.asciidoctor.convert'

configurations {
    realBrowserTestCompile.extendsFrom testCompile
    realBrowserTestRuntime.extendsFrom testRuntime
}

dependencies {
    testCompile project(':internal:test-support')
    testCompile project(':module:geb-spock')
    testCompile 'commons-fileupload:commons-fileupload:1.3.1'
}

sourceSets {
    realBrowserTest
}

asciidoctor {
    attributes = [
        toc                    : 'left',
        doctype                : 'book',
        encoding               : 'utf-8',
        'test-dir'             : '../../test/groovy',
        'test-resources-dir'   : '../../test/resources',
        'real-browser-test-dir': '../../realBrowserTest/groovy',
        'core-source-dir'      : '../../../../../module/geb-core/src/main/groovy',
        numbered               : true,
        sectlinks              : true,
        idprefix               : '',
        idseparator            : '-',
        icons                  : 'font',
        'source-highlighter'   : 'prettify',
        'geb-version'          : project.version,
        'geb-group'            : project.group,
        'geb-group-dir'        : project.group.replace('.', '/'),
        'spock-version'        : '0.7',
        'spock-core-version'   : '0.7-groovy-2.0',
        'selenium-version'     : seleniumVersion,
        'groovy-version'       : groovyVersion,
        'home-page'            : 'www.gebish.org',
        'docinfo1'             : ''
    ]
    sources {
        include 'index.adoc'
    }
    extensions {
        inlinemacro(name: "issue") { parent, target, attributes ->
            options = [
                type: ":link",
                target: "https://github.com/geb/issues/issues/${target}"
            ]

            createInline(parent, "anchor", "#$target", attributes, options).render()
        }
        inlinemacro(name: "github-profile") { parent, target, attributes ->
            options = [
                type: ":link",
                target: "https://github.com/${target}"
            ]
            createInline(parent, "anchor", attributes.text, attributes, options).render()
        }
    }
}

task openManual() {
    dependsOn tasks.asciidoctor
    doLast {
        new java.awt.Desktop().browse(fileTree(tasks.asciidoctor.outputDir).find { it.name == 'index.html' }.toURI())
    }
}

task realBrowserTest(type: Test) {
    testClassesDir = sourceSets.realBrowserTest.output.classesDir
    classpath = sourceSets.realBrowserTest.runtimeClasspath
    testSrcDirs = sourceSets.realBrowserTest.allJava.srcDirs as List

    mustRunAfter test
}

idea.module {
    testSourceDirs += sourceSets.realBrowserTest.allSource.srcDirs
}

check.dependsOn realBrowserTest

test {
    maxParallelForks(Math.max(2, Runtime.runtime.availableProcessors().intdiv(2)))
}