import org.apache.ivy.plugins.resolver.URLResolver
import org.apache.tools.ant.filters.*

apply plugin: "groovy"
apply plugin: "gae"

buildscript {
	repositories {
		add(new URLResolver()) {
			name = "Gaelyk Gradle Plugin"
			addArtifactPattern "http://cloud.github.com/downloads/bmuschko/gradle-gae-plugin/[module]-[revision].[ext]"
		}
		mavenCentral()
	}

	dependencies {
		classpath "com.google.appengine:appengine-tools-sdk:1.5.0"
		classpath ":gradle-gae-plugin:0.4"
	}
}

repositories {
	add(new URLResolver()) {
		name = "Gaelyk"
		addArtifactPattern "http://cloud.github.com/downloads/glaforge/gaelyk/[module]-[revision].[ext]"
	}
}

configurations {
	gaeSdk
}

dependencies {
	groovy "org.codehaus.groovy:groovy-all:1.8.0"
	
	compile "com.google.appengine:appengine-api-1.0-sdk:1.5.0",
	        "com.google.appengine:appengine-api-labs:1.5.0",
	        ":gaelyk:0.7"
	
	gaeSdk "com.google.appengine:appengine-java-sdk:1.5.0.1"
}

task downloadGaeSdk {
	sdkZip = configurations.gaeSdk.singleFile
	sdk = file("build/gaeSdk/${sdkZip.name[0..-5]}")
	
	inputs.file sdkZip
	outputs.dir "build/gaeSdk"
		
	doLast {
		mkdir "build/gaeSdk"
		copy {
			into "build/gaeSdk"
			from zipTree(sdkZip)
		}
	}
}

task configureGaeSdk(dependsOn: downloadGaeSdk) << {
	System.setProperty("appengine.sdk.root", downloadGaeSdk.sdk.absolutePath)
}

// modify all the gae* tasks provided by the gae plugin to not run until
// we install the gae sdk and set the appropriate system property
tasks.each {
	if (it.name.startsWith("gae")) {
		it.dependsOn configureGaeSdk
	}
}

task copyManual(type: Sync) {
	dependsOn project(":doc:manual").compile
	from project(":doc:manual").output
	into "build/manual/manual"
}

task filter(type: Copy) {
	filter(ReplaceTokens, tokens: [version: version.endsWith("SNAPSHOT") ? 'snapshot' : 'release'])
	from "src/main/webapp-filtered"
	into "build/exploded-war-filtered"
}

war {
	dependsOn filter, copyManual
	from filter.destinationDir
	from "build/manual"
}

gae {
	appcfg {
		if (project.hasProperty('gaeEmail')) {
			email = gaeEmail
		}
	}
}

// alias
task uploadArchives(dependsOn: gaeUpload) {}