apply plugin: "base"

src = file("src")
output = file("build/manual")

task compileManual << {
	new markdown2book.Generator(src, output, "UTF-8").generate()
}

def docTasks = []
rootProject.subprojects.findAll { project -> project.path in publishedModules && project.path in groovyModules }.each { project ->
	def taskName = "groovydoc-$project.name"
	task "$taskName" (type: Groovydoc) {
		source project.sourceSets.main.allGroovy
		destinationDir = new File(output, "api/$project.name") 
		classpath = project.sourceSets.main.compileClasspath
		groovyClasspath = project.sourceSets.main.compileClasspath
		exclude "**/internal/**"
		
		link "http://download.oracle.com/javase/6/docs/api/",
			"java.net",
			"java.util",
			"java.lang",
			"java.io"
		
		link "http://selenium.googlecode.com/svn/trunk/docs/api/java/",
			"org.openqa.selenium"
		
		link "http://groovy.codehaus.org/api/",
			"groovy.lang"
		
		docTitle = "Groovy API Documentation for $project.name $project.version"
		footer = "<p style='text-align: center'>Groovy API Documentation for $project.name $project.version - Licensed under the Apache License, Version 2.0 - <a href='http://geb.codehaus.org'>http://geb.codehaus.org</a></p>"
		windowTitle = "Groovy API for $project.name $project.version"
	}
	docTasks << delegate."$taskName"
}

task api(dependsOn: docTasks) << {}
task compile(dependsOn: [compileManual, api]) << {}
