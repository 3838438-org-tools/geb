apply plugin: 'idea'

allprojects { project ->
	version = '0.7.0-SNAPSHOT'
	group = 'org.codehaus.geb'
	isSnapshot = version.endsWith("-SNAPSHOT")

	grailsVersion = "1.3.7"
	seleniumVersion = "2.15.0"
	groovyVersion = "1.7.10"
	spockVersion = "0.6-groovy-1.7-SNAPSHOT"

	spockDependency = "org.spockframework:spock-core:$spockVersion"

	seleniumDependency = "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
	seleniumSupportDependency = "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
	firefoxDriverDependency = "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
	htmlUnitDriverDependency = "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"

	jettyDependency = "org.mortbay.jetty:jetty:6.1.21"

	groovyDependency = "org.codehaus.groovy:groovy-all:$groovyVersion"

	repositories {
		mavenCentral()
		mavenRepo name: "spock-snapshots", url: "http://m2repo.spockframework.org/snapshots"
		mavenRepo name: "java.net", url: "http://download.java.net/maven/2"
	}

	groovyModules = [
		":module:geb-core", ":module:test-utils",
		":module:geb-spock", ":module:geb-junit3", ":module:geb-junit4",
		":module:geb-easyb", ":module:geb-testng"
	]

	publishedModules = [
		":module:geb-core", ":module:geb-spock",
		":module:geb-junit3", ":module:geb-junit4", ":module:geb-easyb",
		":module:geb-testng", ":doc:manual"
	]

	publishedGroovyModules = groovyModules.findAll { it in publishedModules }

	grailsPluginModule = ":module:geb-grails"
}

subprojects {
	if (project.path in groovyModules) {
		apply plugin: "groovy"
		apply plugin: 'idea'

		if (project.path != ":test-utils") {
			apply from: "file:${rootDir}/clover.gradle"
		}

		dependencies {
			groovy groovyDependency
		}

		sourceCompatibility = 1.5
		targetCompatibility = 1.5

		driver = project.hasProperty("driver") ? project.driver : "htmlunit"
		test {
			systemProperties['geb.driver'] = project.driver
		}
	}

	if (project.path in publishedGroovyModules) {
		groovydoc {
			exclude "**/internal/**"

			link "http://download.oracle.com/javase/6/docs/api/",
				"java.net",
				"java.util",
				"java.lang",
				"java.io"

			link "http://selenium.googlecode.com/svn/trunk/docs/api/java/",
				"org.openqa.selenium"

			link "http://groovy.codehaus.org/api/",
				"groovy.lang"

			link "http://www.gebish.org/manual/$project.version/api/geb-core",
				"geb"

			docTitle = "Groovy API Documentation for $project.name $project.version"
			footer = "<p style='text-align: center'>Groovy API Documentation for $project.name $project.version - Licensed under the Apache License, Version 2.0 - <a href='http://www.gebish.org'>http://www.gebish.org</a></p>"
			windowTitle = "Groovy API for $project.name $project.version"
		}

		task sourcesJar(type: Jar) {
			classifier 'sources'
			from sourceSets.main.allSource
		}

		task javadocJar(type: Jar) {
			classifier 'javadoc'
			from groovydoc
		}

		artifacts {
			archives javadocJar, sourcesJar
		}
	}

	if (project.path in publishedModules) {
		if (!plugins.hasPlugin("base")) {
			apply plugin: "base"
		}
		apply plugin: "maven"
		apply plugin: "signing"

		task release(dependsOn: uploadArchives)

		project.afterEvaluate { project, state ->
			state.rethrowFailure()
			if (project.path in publishedModules) {
				signing {
					sign configurations.archives
					required { !isSnapshot && gradle.taskGraph.hasTask(uploadArchives) }
				}

				project.poms = [project.install.repositories.mavenInstaller.pom]

				if (project.hasProperty('codehausUsername') && project.hasProperty('codehausPassword')) {
					uploadArchives {
						project.deployer = repositories.mavenDeployer {
							beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
							uniqueVersion = false
							repository(url: "https://nexus.codehaus.org/service/local/staging/deploy/maven2/") {
								authentication(userName: codehausUsername, password: codehausPassword)
							}
							snapshotRepository(url: "https://nexus.codehaus.org/content/repositories/snapshots/") {
								authentication(userName: codehausUsername, password: codehausPassword)
							}
							pom.project {
								url "http://www.gebish.org"
								inceptionYear "2010"
								licenses {
									license {
										name 'The Apache Software License, Version 2.0'
										url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
										distribution 'repo'
									}
								}
								scm {
									url "https://github.com/geb/geb/"
								}
								developers {
									developer {
										id "ldaley"
										name "Luke Daley"
										roles {
											role "Lead"
											role "Founder"
										}
									}
									developer {
										id "robfletcher"
										name "Rob Fletcher"
										roles {
											role "Founder"
										}
									}
								}

							}
						}
						project.poms << project.deployer.pom
					}
				}

				if (project.hasProperty('modifyPom')) {
					project.poms*.whenConfigured(project.modifyPom)
				}

				// Remove test deps from all poms
				project.poms*.whenConfigured { pom ->
					pom.dependencies.removeAll(pom.dependencies.findAll { it.scope == "test" })
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion "1.0-milestone-8a-20120216221836+0100"
}

